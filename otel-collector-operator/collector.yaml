apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
spec:
  #mode: (deployment, daemonset, statefulset or sidecar)(default(deployment))
  # ingress:
  #   type: ingress
  #   hostname: "collector.example.io"
  #   annotations:
  #     something.com: "true"
  #   ingressClassName: ""
  #   ruleType:
  #     - path: /
  #   tls: 
  #      - secretName: tls-secret
  #        hosts:
  #        - collector.example.io
  replicas: 1
  serviceAccount: opentelemetry-collector-admin
  envFrom:
    - secretRef:
        name: secrets-collector 
  env:    
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.103.1
  resources:
   limits:
     cpu: 100m
     memory: 2000Mi
   requests:
     cpu: 100m
     memory: 500Mi
  # nodeSelector: 
  #   Environment: prd

  # tolerations: 
  #   - key: enviroment
  #     value: infra
  #     effect: NoSchedule
  #     operator: Equal
  config:
    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}
    processors:
      filter:
        metrics:
          exclude:
            match_type: regexp
            metric_names:
              - "go_.*"
              - "scrape_.*"
              - "otlp_.*"
              - "promhttp_.*"
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 20000
        timeout: 10s
      resource:
        attributes:
          - action: insert
            key: loki.tenant
            value: host.name
          - key: k8s.cluster.name
            action: insert
            value: 'cluster_prd'
      
      attributes:
        actions:
          - key: cluster_name
            action: insert
            value: 'cluster_prd'
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name 
        filter:
            node_from_env_var: KUBE_NODE_NAME     
    exporters:
      otlphttp:
        endpoint: https://tempo.elvenobservability.com/http
        headers:
          X-Scope-OrgID: "${env:TENANT_ID}"
          Authorization: "Bearer ${env:API_TOKEN}" 
      prometheusremotewrite:
        endpoint: https://mimir.elvenobservability.com/api/v1/push
        headers:
          X-Scope-OrgID: "${env:TENANT_ID}"   
          Authorization: "Bearer ${env:API_TOKEN}"
      loki:
        endpoint: "https://loki.elvenobservability.com/loki/api/v1/push"
        default_labels_enabled:
          exporter: false
          job: true
        headers:
          X-Scope-OrgID: "${env:TENANT_ID}"
          Authorization: "Bearer ${env:API_TOKEN}"       
    service:
      pipelines:
        metrics:
          receivers: [otlp] 
          processors: [k8sattributes, batch, resource, attributes, filter]
          exporters: [prometheusremotewrite]
        traces:
          receivers: [otlp]
          processors: [k8sattributes, resource, attributes]
          exporters: [otlphttp]
        logs:
          receivers: [otlp]
          processors: [resource, batch]
          exporters: [loki]  
